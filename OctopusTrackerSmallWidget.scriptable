// Scriptable Widget for Displaying Energy and Gas Tariff Information
// CS March 2024
const widget = new ListWidget(); // Initialize a new list widget
widget.backgroundColor = new Color("#100030"); // Set the background color of the widget

widget.addSpacer(); // Add spacer to center the content vertically

const headerStack = widget.addStack(); // Create a stack for the header to center text
headerStack.addSpacer(); // Spacer to center the header
const header = headerStack.addText("Tracker Tariff"); // Add header text
header.font = Font.boldSystemFont(15); // Set the font and size of the header
header.textColor = Color.white(); // Set the color of the header text
headerStack.addSpacer(); // Spacer to center the header
widget.addSpacer(10); // Add space below the header

// Function to fetch tariff data for electricity or gas
async function fetchTariffData(tariffType) {
    const today = new Date(); // Get today's date
    const tomorrow = new Date(today.getTime() + 86400000); // Calculate tomorrow's date
    const baseUrl = `https://api.octopus.energy/v1/products/SILVER-23-12-06/`; // Base URL for the API
    const tariffCode = `${tariffType[0].toUpperCase()}-1R-SILVER-23-12-06-F`; // Construct the tariff code
    // Format today and tomorrow's dates as strings
    const todayStr = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`;
    const tomorrowStr = `${tomorrow.getFullYear()}-${String(tomorrow.getMonth() + 1).padStart(2, '0')}-${String(tomorrow.getDate()).padStart(2, '0')}`;
    // Construct URLs for today and tomorrow's tariff data
    const urlToday = `${baseUrl}${tariffType}-tariffs/${tariffCode}/standard-unit-rates/?period_from=${todayStr}T00:00:00Z&period_to=${todayStr}T23:59:59Z`;
    const urlTomorrow = `${baseUrl}${tariffType}-tariffs/${tariffCode}/standard-unit-rates/?period_from=${tomorrowStr}T00:00:00Z&period_to=${tomorrowStr}T23:59:59Z`;

    let dataToday, dataTomorrow;
    try {
        // Fetch and process today's tariff data
        let responseToday = await new Request(urlToday).loadJSON();
        dataToday = responseToday.results[0]?.value_inc_vat.toFixed(2);
        // Fetch and process tomorrow's tariff data
        let responseTomorrow = await new Request(urlTomorrow).loadJSON();
        dataTomorrow = responseTomorrow.results[0]?.value_inc_vat.toFixed(2);
    } catch (error) {
        console.error(`Error fetching tariff data: ${error}`);
        dataToday = "N/A";
        dataTomorrow = "N/A";
    }

    return { today: dataToday, tomorrow: dataTomorrow }; // Return today and tomorrow's data
}

// Function to display the tariff data on the widget
async function displayTariffData(tariffType, symbolName) {
    const data = await fetchTariffData(tariffType); // Fetch the tariff data
    let row = widget.addStack(); // Create a new row in the widget
    row.layoutHorizontally();
    row.centerAlignContent();

    //row.addSpacer(); // Add a spacer to help center the row content

    const symbol = SFSymbol.named(symbolName); // Get the SF Symbol for the tariff type
    symbol.applyMediumWeight(); // Apply medium weight to the symbol for better visibility
    const img = row.addImage(symbol.image); // Add the symbol image to the row
    // Set the symbol's color based on the tariff type
    img.tintColor = tariffType === "electricity" ? new Color("#FFD700") : new Color("#FF4500"); // Yellow for electricity, fiery orange for gas
    img.imageSize = new Size(30, 30); // Set the size of the symbol image
    img.resizable = true; // Allow the symbol image to be resizable
    

    // Display today's price in a large font
    let priceElement = row.addText(`${data.today}p`);
    priceElement.font = Font.boldSystemFont(26);
    priceElement.textColor = Color.white();


    widget.addSpacer(4); // Add space below today's price

    let subText, subElement;
    if (data.tomorrow && data.tomorrow !== "N/A") {
        let change = data.today && data.today !== "N/A" ? ((parseFloat(data.tomorrow) - parseFloat(data.today)) / parseFloat(data.today)) * 100 : 0;
        let percentageChange = Math.abs(change).toFixed(2) + "%"; 
        let arrow = change > 0 ? "↑" : (change < 0 ? "↓" : "");
        subText = `Tmrw: ${data.tomorrow}p (${percentageChange}${arrow})`;
        subElement = widget.addText(subText);
        subElement.textColor = change > 0 ? new Color("#FF3B30") : (change < 0 ? new Color("#30D158") : Color.white());
        subElement.font = Font.systemFont(11);
    } else {
        subText = `Tmrw: Coming Soon`;
        subElement = widget.addText(subText);
        subElement.textColor = Color.white();
        subElement.font = Font.systemFont(11);
    }

    widget.addSpacer(10); // Add final spacer to center the content vertically
}

// Display tariff information for electricity and gas
await displayTariffData("electricity", "bolt.fill");
await displayTariffData("gas", "flame.fill");

// Optional: Set the widget's URL to open a specific app or webpage
widget.url = "https://octopustracker.small3y.co.uk";

// Preview the widget in the app if not running in a widget context
if (!config.runsInWidget) {
    await widget.presentSmall();
}

Script.setWidget(widget); // Set the widget for display
Script.complete(); // Signal that the script has completed execution
