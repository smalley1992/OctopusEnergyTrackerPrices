// Scriptable Widget for Displaying Energy and Gas Tariff Information
// Updated March 2024
const widget = new ListWidget(); // Initialize a new list widget
widget.backgroundColor = new Color("#100030"); // Set the background color

widget.addSpacer(20); // Top spacer
const header = widget.addText("Tracker Tariff"); // Header text
header.font = Font.boldSystemFont(14); // Header font and size
header.textColor = Color.white(); // Header text color
widget.addSpacer(8); // Spacer below header

// Async function to fetch tariff data
async function fetchTariffData(tariffType) {
    const today = new Date();
    const tomorrow = new Date(today);
    tomorrow.setDate(today.getDate() + 1);

    const baseUrl = `https://api.octopus.energy/v1/products/SILVER-23-12-06/`;
    const productCode = "SILVER-23-12-06";
    const regionCode = "F";
    const tariffCode = `${tariffType[0].toUpperCase()}-1R-${productCode}-${regionCode}`;

    function formatDate(date) {
        return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;
    }

    const urlToday = `${baseUrl}${tariffType}-tariffs/${tariffCode}/standard-unit-rates/?period_from=${formatDate(today)}T00:00:00Z&period_to=${formatDate(today)}T23:59:59Z`;
    const urlTomorrow = `${baseUrl}${tariffType}-tariffs/${tariffCode}/standard-unit-rates/?period_from=${formatDate(tomorrow)}T00:00:00Z&period_to=${formatDate(tomorrow)}T23:59:59Z`;

    try {
        const [responseToday, responseTomorrow] = await Promise.all([
            new Request(urlToday).loadJSON(),
            new Request(urlTomorrow).loadJSON(),
        ]);
        const dataToday = responseToday.results[0] ? responseToday.results[0].value_inc_vat.toFixed(2) : "N/A";
        const dataTomorrow = responseTomorrow.results[0] ? responseTomorrow.results[0].value_inc_vat.toFixed(2) : "N/A";
        return { today: dataToday, tomorrow: dataTomorrow };
    } catch (error) {
        console.error(`Error fetching tariff data: ${error}`);
        return { today: "Error", tomorrow: "Error" }; // More informative error state
    }
}

// Function to display tariff data on the widget
async function displayTariffData(tariffType, symbolName) {
    const data = await fetchTariffData(tariffType);
    let row = widget.addStack();
    row.centerAlignContent();

    const symbol = SFSymbol.named(symbolName);
    symbol.applyMediumWeight();
    const img = row.addImage(symbol.image);
    img.tintColor = tariffType === "electricity" ? new Color("#FFD700") : new Color("#FF4500");
    img.imageSize = new Size(30, 30);
    img.resizable = true;
    row.addSpacer(8);

    let priceElement = row.addText(`${data.today}p`);
    priceElement.font = Font.boldSystemFont(26);
    priceElement.textColor = Color.white();

    widget.addSpacer(4);

    let subText, subElement;
    if (data.tomorrow !== "N/A" && data.tomorrow !== "Error") {
        let change = parseFloat(data.tomorrow) - parseFloat(data.today);
        let percentageChange = ((change / parseFloat(data.today)) * 100).toFixed(2) + "%";
        let arrow = change > 0 ? "↑" : change < 0 ? "↓" : "";
        subText = `Tmrw: ${data.tomorrow}p (${percentageChange}${arrow})`;
        subElement = widget.addText(subText);
        subElement.textColor = change > 0 ? new Color("#FF3B30") : change < 0 ? new Color("#30D158") : Color.white();
        subElement.font = Font.systemFont(11);
    } else {
        subText = data.tomorrow === "Error" ? `Tmrw: Error` : `Tmrw: Coming Soon`;
        subElement = widget.addText(subText);
        subElement.textColor = Color.gray(); // Different color for error/unknown state
        subElement.font = Font.systemFont(11);
    }

    widget.addSpacer(20);
}

// Execute display functions
await displayTariffData("electricity", "bolt.fill");
await displayTariffData("gas", "flame.fill");

widget.url = "https://octopustracker.small3y.co.uk"; // Widget URL

// Preview the widget if not in a widget context
if (!config.runsInWidget) {
    await widget.presentSmall();
}

Script.setWidget(widget);
Script.complete();
